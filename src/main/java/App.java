import java.util.*;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.stream.Collectors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemService;
    private SalesPromotionRepository salesPromoService;

    public App(ItemRepository itemService, SalesPromotionRepository salesPromoService) {
        this.itemService = itemService;
        this.salesPromoService = salesPromoService;
    }

    public String bestCharge(List<String> inputs) {
        App app = startApp();
        String receipt = "";
        int promoIndex;
        List<CartItem> finalCart = new ArrayList<>();

        AtomicReference<Double> cartTotal = new AtomicReference<>(0.0);
        Map cart = getCart(inputs);
        inputs = (List<String>) cart.keySet().stream().collect(Collectors.toList());

        final List<String> finalInputList = generateFinalInputList(inputs);
        generateFinalCart(finalCart, cart, finalInputList);

        return receipt;
    }

    private void generateFinalCart(List<CartItem> finalCart, Map cart, List<String> finalInputList) {
        App app;
        try{
        finalInputList.forEach(input -> {
            List<SalesPromotion> possiblePromos = new ArrayList<>();
            Item matchedItem = itemService.findAll().stream().filter(item -> {
                return item.getId().equals(input);
            }).findFirst().get();

            Double price = matchedItem.getPrice();
            String name = matchedItem.getName();
            String id = matchedItem.getId();
            int amount = Integer.parseInt(cart.get(input).toString());
            possiblePromos = salesPromoService.findAll().stream().filter(salesPromotion -> {
              return salesPromotion.getRelatedItems().contains(input);
            }).collect(Collectors.toList());
            finalCart.add(new CartItem(id, name, price, possiblePromos,amount));
            System.out.println(possiblePromos);
        });
        }catch(NumberFormatException e){
            System.out.println("INVALID INPUT!\nPlease try again");
            app = startApp();
        }
    }

    private static App startApp() {
        App app = new App(new ItemService(), new SalesPromoService());
        return app;
    }


    private static Map getCart(List<String> inputs) {
        Map cart = new HashMap();
        inputs.forEach(input->{
            List<String> splitInput = Arrays.asList(input.split(" x "));
            cart.put(splitInput.get(0),splitInput.get(1));
        });
        return cart;
    }
    private List<String> generateFinalInputList(List<String> inputs) {
        return inputs.stream().filter(input -> {
            return itemService.findAll().stream().anyMatch(item -> {
                return item.getId().equals(input);
            });
        }).collect(Collectors.toList());
    }


}